// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using MB.Dominio.Entidades;
using MB.Dominio.Shared;
using Refit;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiCidade : IApiCidade
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiCidade(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Cidade> cidades)
        {
            var arguments = new object[] { cidades };
            var func = methodImpls.GetOrAdd("Salvar(List<Cidade> cidades)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Cidade>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Cidade> cidades)
        {
            var arguments = new object[] { cidades };
            var func = methodImpls.GetOrAdd("Excluir(List<Cidade> cidades)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Cidade>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Cidade>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Cidade>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Cidade> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Cidade>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiCliente : IApiCliente
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiCliente(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Cliente> clientes)
        {
            var arguments = new object[] { clientes };
            var func = methodImpls.GetOrAdd("Salvar(List<Cliente> clientes)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Cliente>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Cliente> clientes)
        {
            var arguments = new object[] { clientes };
            var func = methodImpls.GetOrAdd("Excluir(List<Cliente> clientes)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Cliente>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Cliente>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Cliente>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Cliente> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Cliente>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiEmpresa : IApiEmpresa
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiEmpresa(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Empresa> empresas)
        {
            var arguments = new object[] { empresas };
            var func = methodImpls.GetOrAdd("Salvar(List<Empresa> empresas)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Empresa>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Empresa> empresas)
        {
            var arguments = new object[] { empresas };
            var func = methodImpls.GetOrAdd("Excluir(List<Empresa> empresas)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Empresa>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Empresa>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Empresa>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Empresa> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Empresa>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiEstado : IApiEstado
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiEstado(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Estado> estados)
        {
            var arguments = new object[] { estados };
            var func = methodImpls.GetOrAdd("Salvar(List<Estado> estados)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Estado>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Estado> estados)
        {
            var arguments = new object[] { estados };
            var func = methodImpls.GetOrAdd("Excluir(List<Estado> estados)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Estado>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Estado>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Estado>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Estado> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Estado>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiFornecedor : IApiFornecedor
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiFornecedor(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Fornecedor> fornecedors)
        {
            var arguments = new object[] { fornecedors };
            var func = methodImpls.GetOrAdd("Salvar(List<Fornecedor> fornecedors)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Fornecedor>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Fornecedor> fornecedors)
        {
            var arguments = new object[] { fornecedors };
            var func = methodImpls.GetOrAdd("Excluir(List<Fornecedor> fornecedors)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Fornecedor>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Fornecedor>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Fornecedor>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Fornecedor> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Fornecedor>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiGrupo : IApiGrupo
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiGrupo(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Grupo> grupos)
        {
            var arguments = new object[] { grupos };
            var func = methodImpls.GetOrAdd("Salvar(List<Grupo> grupos)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Grupo>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Grupo> grupos)
        {
            var arguments = new object[] { grupos };
            var func = methodImpls.GetOrAdd("Excluir(List<Grupo> grupos)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Grupo>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Grupo>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Grupo>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Grupo> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Grupo>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiPedido : IApiPedido
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiPedido(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Pedido> pedidos)
        {
            var arguments = new object[] { pedidos };
            var func = methodImpls.GetOrAdd("Salvar(List<Pedido> pedidos)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Pedido>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Pedido> pedidos)
        {
            var arguments = new object[] { pedidos };
            var func = methodImpls.GetOrAdd("Excluir(List<Pedido> pedidos)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Pedido>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Pedido>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Pedido>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Pedido> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Pedido>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiProduto : IApiProduto
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiProduto(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Produto> produtos)
        {
            var arguments = new object[] { produtos };
            var func = methodImpls.GetOrAdd("Salvar(List<Produto> produtos)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Produto>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Produto> produtos)
        {
            var arguments = new object[] { produtos };
            var func = methodImpls.GetOrAdd("Excluir(List<Produto> produtos)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Produto>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Produto>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Produto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Produto> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Produto>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiTransportadora : IApiTransportadora
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiTransportadora(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Transportadora> Transportadoras)
        {
            var arguments = new object[] { Transportadoras };
            var func = methodImpls.GetOrAdd("Salvar(List<Transportadora> Transportadoras)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Transportadora>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Transportadora> Transportadoras)
        {
            var arguments = new object[] { Transportadoras };
            var func = methodImpls.GetOrAdd("Excluir(List<Transportadora> Transportadoras)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Transportadora>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Transportadora>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Transportadora>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Transportadora> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Transportadora>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiUnidade : IApiUnidade
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiUnidade(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Unidade> unidades)
        {
            var arguments = new object[] { unidades };
            var func = methodImpls.GetOrAdd("Salvar(List<Unidade> unidades)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Unidade>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Unidade> unidades)
        {
            var arguments = new object[] { unidades };
            var func = methodImpls.GetOrAdd("Excluir(List<Unidade> unidades)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Unidade>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Unidade>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Unidade>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Unidade> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Unidade>)func(Client, arguments);
        }

    }
}

namespace MB.Dominio.Interfaces.API
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIApiVendedor : IApiVendedor
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIApiVendedor(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task Salvar(List<Vendedor> vendedors)
        {
            var arguments = new object[] { vendedors };
            var func = methodImpls.GetOrAdd("Salvar(List<Vendedor> vendedors)", _ => requestBuilder.BuildRestResultFuncForMethod("Salvar", new Type[] { typeof(List<Vendedor>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Excluir(List<Vendedor> vendedors)
        {
            var arguments = new object[] { vendedors };
            var func = methodImpls.GetOrAdd("Excluir(List<Vendedor> vendedors)", _ => requestBuilder.BuildRestResultFuncForMethod("Excluir", new Type[] { typeof(List<Vendedor>) }));
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<IEnumerable<Vendedor>> Retornartodas()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("Retornartodas()", _ => requestBuilder.BuildRestResultFuncForMethod("Retornartodas", new Type[] {  }));
            return (Task<IEnumerable<Vendedor>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<Vendedor> RetornarPorId(int id)
        {
            var arguments = new object[] { id };
            var func = methodImpls.GetOrAdd("RetornarPorId(int id)", _ => requestBuilder.BuildRestResultFuncForMethod("RetornarPorId", new Type[] { typeof(int) }));
            return (Task<Vendedor>)func(Client, arguments);
        }

    }
}
